
Aop是什么
与oop对比，面向切面，传统的oop开发中的代码逻辑是自上而下的，在这些至上而下的过程中会产生一些横切性的问题，
这些横切性的问题和我们主业务逻辑关系不大
会散落在代码的各个地方，难以维护，aop的编程思想就是吧业务逻辑和横切问题进行分离，从而达到结偶的目的，是代码重用行和开发效率高


Spring框架的AOP（Aspect Oriented Programming）是一种编程范式，它可以将应用程序的业务逻辑和横切关注点（如日志、事务、安全性等）分离开来，从而实现更好的模块化和可维护性。

在Spring框架中，AOP通过将横切关注点划分为切面（Aspect）来实现。切面是一个模块化的横切关注点，它可以定义一组通用的横切逻辑，并将这些逻辑应用到多个不同的对象和方法上。
在Spring框架中，切面通常被实现为一个Java类，其中包含了一组切点（Pointcut）、通知（Advice）和切面配置（Aspect Configuration）。

切点（Pointcut）是一个表达式，用于匹配需要被切入的目标对象和方法。通知（Advice）是在切点匹配到目标对象和方法时执行的代码。通知可以分为前置通知（Before Advice）、后置通知（After Advice）、
环绕通知（Around Advice）、异常通知（After Throwing Advice）和最终通知（After Returning Advice）等几种类型。

切面配置（Aspect Configuration）是用来定义切面的配置信息，包括切点表达式、通知类型以及通知的具体实现等。

Spring框架的AOP实现基于动态代理和字节码增强技术。在运行时，Spring框架会根据切面配置信息动态生成代理对象或者修改目标对象的字节码，从而实现横切逻辑的注入。这种方式不仅可以实现非侵入式的横切逻辑，
还可以提高应用程序的性能和可维护性。

总之，Spring框架的AOP提供了一种灵活、可扩展的方式来实现横切关注点的模块化和可重用性，可以帮助开发人员更好地实现应用程序的业务逻辑和横切逻辑的分离。